scalar DateTime
scalar JSON

###
# Hypothes.is API
###
type Annotation {
    id: String
    created: String
    updated: String
    user: String
    uri: String
    text: String
    group: String
    flagged: Boolean
    hidden: Boolean
    user_info: UserInfo
    links: Links
    document: Document
    target: [Target]
    permissions: Permissions
    references: [String]
    tags: [String]
}

type APIResponse {
    total: Int
    rows: [Annotation!]
}

type Document {
    title: [String]
}

input DocumentInput {
    title: [String]
}

type Links {
    html: String
    incontext: String
    json: String
}

input LinksInput {
    html: String
    incontext: String
    json: String
}

type Permissions {
    delete: [String]
    update: [String]
    admin: [String]
    read: [String]
}

input PermissionsInput {
    delete: [String]
    update: [String]
    admin: [String]
    read: [String]
}

type Selector {
    type: String
    exact: String
    endOffset: Int
    startOffset: Int
    endContainer: String
    startContainer: String
}

input SelectorInput {
    type: String
    exact: String
    endOffset: Int
    startOffset: Int
    endContainer: String
    startContainer: String
}

type Target {
    source: String
    selector: [Selector]
}

input TargetInput {
    source: String
    selector: [SelectorInput]
}

type UserInfo {
    display_name: String
}

input UserInfoInput {
    display_name: String
}

###
# CMS
###
type ContactForm {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    Email: String
    Message: String
    # created_by: AdminUser
    # updated_by: AdminUser
}

type Post {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    Text: String
    Title: String
    Media: UploadFile
}

type UploadFile {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    name: String!
    alternativeText: String
    caption: String
    width: Int
    height: Int
    formats: JSON
    hash: String!
    ext: String
    mime: String!
    size: Float!
    url: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    # created_by: AdminUser
    # updated_by: AdminUser
}

type Query {
    annotations(
        _separate_replies: Boolean
        any: String
        group: String
        limit: Int
        offset: Int
        order: String
        quote: String
        references: String
        search_after: String
        sort: String
        tag: String
        tags: [String]
        text: String
        uri: String
        user: String
        wildcard_uri: String
    ): APIResponse
    annotation(id: String): Annotation
    post(id: String): Post
    posts: [Post]
}

type Mutation {
    createAnnotation(
        id: String
        created: String
        updated: String
        user: String
        uri: String
        text: String
        group: String
        flagged: Boolean
        hidden: Boolean
        user_info: UserInfoInput
        links: LinksInput
        document: DocumentInput
        target: [TargetInput]
        permissions: PermissionsInput
        references: [String]
        tags: [String]
    ): Annotation
    submitContactForm(email: String, message: String): ContactForm
}
